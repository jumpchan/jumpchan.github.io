<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QP.Chen Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qpchen.tk/"/>
  <updated>2019-03-06T14:17:58.000Z</updated>
  <id>http://qpchen.tk/</id>
  
  <author>
    <name>QP.Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Compiler Overview</title>
    <link href="http://qpchen.tk/2019/03/06/2019-03-06-Compiler-Overview/"/>
    <id>http://qpchen.tk/2019/03/06/2019-03-06-Compiler-Overview/</id>
    <published>2019-03-06T15:30:58.000Z</published>
    <updated>2019-03-06T14:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Program-Execution-程序执行"><a href="#Program-Execution-程序执行" class="headerlink" title="Program Execution 程序执行"></a>Program Execution 程序执行</h1><p>计算机程序执行过程主要涉及四个部分，包括<a href="#Code-代码">代码</a>、翻译、中间表示和执行。其中侠义的编译器属于翻译部分，而一个完整的编译系统的执行包含了所有四个部分。</p><a id="more"></a><h2 id="Code-代码"><a href="#Code-代码" class="headerlink" title="Code 代码"></a>Code 代码</h2><p>代码（Code）是指由计算机程序的形式编码而成的一系列指令集合，它能够由计算机执行。在计算机硬件上运行软件需要两个部分，一个是代码（Code），另一个是数据（Data）。</p><p>计算机只能直接执行由指令集中指令构成的机器码（Machine Code）。但不论是机器码还是其他低级程序语言，都不是可以简单阅读的，因此大多源码（Source Code）都是由高级程序语言编写的。而编译器（Compiler）或者解释器（Interpreter）则将源码翻译成计算机可执行的机器语言。一个编译器生成的是目标代码（Object Code），一般来说就是机器语言（Machine Language）构成的，但也包括一些比源码更低级别的中间语言（Intermediate Language）。而解释器则是解释字节码（Bytecode）的工具，字节码是一种比源码低级的代码。</p><p>接下来具体说明代码的不同种类。</p><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><p>任意的使用人类可读的程序语言编写的代码组合都可称为源码（Source Code），它可能包含注释，一般使用富文本表达。源码一般会被汇编器（Assembler）或者编译器（Compiler）翻译成二进制机器码（Binary Machine Code），从而能够直接被计算机理解，这段机器码可能会被存储起来，从而晚一点再执行。除此之外，源码也可能被解释，从而立即执行。</p><h3 id="Object-Code"><a href="#Object-Code" class="headerlink" title="Object Code"></a>Object Code</h3><p>目标代码（Object Code）是编译器的产物。通常来讲，目标码是一段状态或者指令的序列，它是由一种计算机语言表示的，一般是一种机器码语言或者中间语言，例如RTL (Register Transfer Language)就是一种中间语言。</p><h3 id="Bytecode"><a href="#Bytecode" class="headerlink" title="Bytecode"></a>Bytecode</h3><h3 id="Machine-Code"><a href="#Machine-Code" class="headerlink" title="Machine Code"></a>Machine Code</h3><h3 id="Microcode"><a href="#Microcode" class="headerlink" title="Microcode"></a>Microcode</h3><h2 id="Translator-Computing"><a href="#Translator-Computing" class="headerlink" title="Translator (Computing)"></a>Translator (Computing)</h2><h3 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h3><h4 id="Compile-time"><a href="#Compile-time" class="headerlink" title="Compile-time"></a>Compile-time</h4><h3 id="Optimizing-Compiler"><a href="#Optimizing-Compiler" class="headerlink" title="Optimizing Compiler"></a>Optimizing Compiler</h3><h2 id="Intermediate-Representation-IR"><a href="#Intermediate-Representation-IR" class="headerlink" title="Intermediate Representation (IR)"></a>Intermediate Representation (IR)</h2><h2 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h2><h3 id="Runtime-System"><a href="#Runtime-System" class="headerlink" title="Runtime System"></a>Runtime System</h3><h4 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h4><h3 id="Executable"><a href="#Executable" class="headerlink" title="Executable"></a>Executable</h3><h3 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h3><h3 id="Virtual-Machine"><a href="#Virtual-Machine" class="headerlink" title="Virtual Machine"></a>Virtual Machine</h3><hr><h1 id="Compilation-Strategies"><a href="#Compilation-Strategies" class="headerlink" title="Compilation Strategies"></a>Compilation Strategies</h1><h2 id="Just-in-Time-JIT"><a href="#Just-in-Time-JIT" class="headerlink" title="Just-in-Time (JIT)"></a>Just-in-Time (JIT)</h2><h3 id="Tracing-Just-in-Time"><a href="#Tracing-Just-in-Time" class="headerlink" title="Tracing Just-in-Time"></a>Tracing Just-in-Time</h3><h2 id="Ahead-of-Time-AOT"><a href="#Ahead-of-Time-AOT" class="headerlink" title="Ahead-of-Time (AOT)"></a>Ahead-of-Time (AOT)</h2><h2 id="Transcompilation"><a href="#Transcompilation" class="headerlink" title="Transcompilation"></a>Transcompilation</h2><h2 id="Recompilation"><a href="#Recompilation" class="headerlink" title="Recompilation"></a>Recompilation</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Program-Execution-程序执行&quot;&gt;&lt;a href=&quot;#Program-Execution-程序执行&quot; class=&quot;headerlink&quot; title=&quot;Program Execution 程序执行&quot;&gt;&lt;/a&gt;Program Execution 程序执行&lt;/h1&gt;&lt;p&gt;计算机程序执行过程主要涉及四个部分，包括&lt;a href=&quot;#Code-代码&quot;&gt;代码&lt;/a&gt;、翻译、中间表示和执行。其中侠义的编译器属于翻译部分，而一个完整的编译系统的执行包含了所有四个部分。&lt;/p&gt;
    
    </summary>
    
      <category term="Compiler" scheme="http://qpchen.tk/categories/Compiler/"/>
    
    
      <category term="Compiler" scheme="http://qpchen.tk/tags/Compiler/"/>
    
      <category term="Overview" scheme="http://qpchen.tk/tags/Overview/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://qpchen.tk/2019/03/06/hello-world/"/>
    <id>http://qpchen.tk/2019/03/06/hello-world/</id>
    <published>2019-03-06T14:19:27.472Z</published>
    <updated>2019-01-15T08:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info    测试中文23jfdsklj尖峰时刻: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server测试中文23</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\begin{equation}  e=mc^2  \end{equation}\label{eq1}</script><p>The famous matter-energy equation $\eqref{eq1}$ proposed by Einstein…</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned}a &= b + c \\  &= d + e + f + g \\  &= h + i\end{aligned}\end{equation}\label{eq2}</script><p>Equation $\eqref{eq2}$ is a multi-line equation.</p><script type="math/tex; mode=display">\begin{align}a &= b + c \label{eq3} \\x &= yz \label{eq4}\\l &= m - n \label{eq5}\end{align}</script><p>There are three aligned equations: equation $\eqref{eq3}$, equation $\eqref{eq4}$ and equation $\eqref{eq5}$.</p><script type="math/tex; mode=display">\begin{align}-4 + 5x &= 2+y \nonumber  \\ w+2 &= -1+w \\ ab &= cb\end{align}</script><script type="math/tex; mode=display">x+1\over\sqrt{1-x^2} \tag{i}\label{eq_tag}</script><p>Equation $\eqref{eq_tag}$ use <code>\tag{}</code> instead of automatic numbering.</p><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a><br><!--stackedit_data:eyJoaXN0b3J5IjpbLTc0MDcwMDYwOF19--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info    测试中文23jfdsklj尖峰时刻: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="test" scheme="http://qpchen.tk/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>CGO Compiler</title>
    <link href="http://qpchen.tk/2019/02/27/2019-02-27-CGO-Compiler/"/>
    <id>http://qpchen.tk/2019/02/27/2019-02-27-CGO-Compiler/</id>
    <published>2019-02-27T17:00:00.000Z</published>
    <updated>2019-03-06T14:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a record of reading about working shop on CGO 19’. The workshop included talks from various projects - Julia (Julia Computing), TVM (UW), Glow (Facebook), XLA (Google), nGraph (Intel), TensorRT (Nvidia), and the soon to release MLIR (Google).</p><a id="more"></a><h1 id="Workshop-on-Compilers-for-Machine-Learning-C4ML"><a href="#Workshop-on-Compilers-for-Machine-Learning-C4ML" class="headerlink" title="Workshop on Compilers for Machine Learning (C4ML)"></a>Workshop on Compilers for Machine Learning (<a href="https://www.c4ml.org/" title="Compilers for Machine Learning" target="_blank" rel="noopener">C4ML</a>)</h1><h2 id="Julia-A-Compiler-to-compile-Code-from-Julia-to-XLA"><a href="#Julia-A-Compiler-to-compile-Code-from-Julia-to-XLA" class="headerlink" title="Julia: A Compiler to compile Code from Julia to XLA"></a>Julia: A Compiler to compile Code from Julia to XLA</h2><blockquote><p>“Getting to Machine Learning from a General Purpose Compiler”, Keno Fischer, Jameson Nash, <a href="https://juliacomputing.com/communication/publications.html" title="Julia Computing Publications" target="_blank" rel="noopener"><strong>Julia Computing</strong></a>.<br>Presentation: <a href="https://juliacomputing.com/assets/pdf/CGO_C4ML_talk.pdf" title="Julia Presentation" target="_blank" rel="noopener">PDF</a>, <a href="https://juliacomputing.com/blog/2019/02/19/growing-a-compiler.html" title="Julia Blog" target="_blank" rel="noopener">Blog</a></p></blockquote><p>这个编译器的目标是编译Julia代码到TPU平台的XLA代码上，因此编译器的Backend是LLVM。而LLVM是一个静态编译Backend，而Julia语言在语义上是动态语言，因此编译器需要转化原语言中的动态语义到LLVM的静态语义表示。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a record of reading about working shop on CGO 19’. The workshop included talks from various projects - Julia (Julia Computing), TVM (UW), Glow (Facebook), XLA (Google), nGraph (Intel), TensorRT (Nvidia), and the soon to release MLIR (Google).&lt;/p&gt;
    
    </summary>
    
      <category term="Conference" scheme="http://qpchen.tk/categories/Conference/"/>
    
    
      <category term="Record" scheme="http://qpchen.tk/tags/Record/"/>
    
      <category term="Compiler" scheme="http://qpchen.tk/tags/Compiler/"/>
    
      <category term="Computer Architecture" scheme="http://qpchen.tk/tags/Computer-Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Domain Specific Words</title>
    <link href="http://qpchen.tk/2019/02/25/2019-02-25-Domain-Specific-Words/"/>
    <id>http://qpchen.tk/2019/02/25/2019-02-25-Domain-Specific-Words/</id>
    <published>2019-02-25T10:59:34.000Z</published>
    <updated>2019-03-06T14:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a record of normal words in computer science domain.</p><h2 id="Domain-Specific-Words"><a href="#Domain-Specific-Words" class="headerlink" title="Domain Specific Words"></a>Domain Specific Words</h2><h3 id="Vanilla-Code"><a href="#Vanilla-Code" class="headerlink" title="Vanilla Code"></a>Vanilla Code</h3><p>Vanilla often refers to pure or plain. So in terms of programming languages, it means either without the use of 3rd party libraries or without the use of frameworks.</p><p>在计算机编程的范畴中，通常表示不使用第三方库或任何相关的框架平台等。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a record of normal words in computer science domain.&lt;/p&gt;
&lt;h2 id=&quot;Domain-Specific-Words&quot;&gt;&lt;a href=&quot;#Domain-Specific-Words&quot; class=&quot;headerlink&quot; title=&quot;Domain Specific Words&quot;&gt;&lt;/a&gt;Domain Specific Words&lt;/h2&gt;&lt;h3 id=&quot;Vanilla-Code&quot;&gt;&lt;a href=&quot;#Vanilla-Code&quot; class=&quot;headerlink&quot; title=&quot;Vanilla Code&quot;&gt;&lt;/a&gt;Vanilla Code&lt;/h3&gt;&lt;p&gt;Vanilla often refers to pure or plain. So in terms of programming languages, it means either without the use of 3rd party libraries or without the use of frameworks.&lt;/p&gt;
&lt;p&gt;在计算机编程的范畴中，通常表示不使用第三方库或任何相关的框架平台等。&lt;/p&gt;
    
    </summary>
    
      <category term="General Concepts" scheme="http://qpchen.tk/categories/General-Concepts/"/>
    
    
      <category term="Computer Science" scheme="http://qpchen.tk/tags/Computer-Science/"/>
    
      <category term="Record" scheme="http://qpchen.tk/tags/Record/"/>
    
  </entry>
  
</feed>
