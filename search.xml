<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Paper] DNestMap: Mapping Deeply-Nested Loops on Ultra-Low Power CGRAs]]></title>
    <url>%2F2019%2F07%2F18%2F2019-07-18-Paper-DNestMap%2F</url>
    <content type="text"><![CDATA[简介该文针对极低功耗CGRA中配置内存受限（很小）的情况，提出一个映射方法，映射包含深度嵌套循环和非规则控制流结构的应用。该方法将应用和CGRA进行划分（partitioning），从多个嵌套循环中提取出最合适的代码块做映射，从而有效地通过时空（spatio-temporal）划分静态缓存这些划分后的代码块配置信息到配置内存中，以较少的启动间隔（II）代价，获得较多的配置内存加载时间降低，从而加快整体执行时间。 团队新加坡国立大学的工作，从2017年DAC上的HyCUBE硬件架构，到2018年DAC上该论文关于映射深度嵌套循环到极低功耗CGRA上的工作。 相关工作 关于解决CMEM限制问题，有将配置内存当作缓存（cache），从时间上动态缓存配置信息的几种工作。 包括cache prefetching、配置信息管理策略优化和多面体配置等工作； 关于该文方法的各个步骤的解决方法，涉及如下几种技术： 三维正交背包问题（3D orthogonal knapsack, 3D-OKP） 操作（Operation）的Packing Class抽象 三维正交Packing问题(Orthogonal Packing Problem of 3-Dimension, OPP-3D) 分支界限搜索（branch-and-bound search, B&amp;B search） 贡献和动机大多数应用包含嵌套循环，而当前大部分映射方法仅针对最内层循环，未考虑应用程序中复杂嵌套循环以及非规则控制流的部分如何映射。当映射该部分源码时，会对配置内存（Configuration Memory, CMEM）产生容量要求。针对超低功耗CGRA中CMEM极小时，嵌套循环用传统映射方法则会从片外内存频繁读取配置信息，在片上CMEM产生交换（swap）代价。 方法【相关工作中的各个步骤的解决技术，需要进一步了解，以深入该文到底如何设计时空配置信息缓存方法的】 实验总结待商讨问题 针对MU到PE块的映射，用ILP求得局部最优解（此时尺寸都很小，求解应该很快），再做PEA划分等问题，能否提高质量？ 既然整个运行时间包含很多breakdown的部分，能否用一种综合打分的机制，统一评价映射方法以及架构设计的好坏？ Reference [1] Karunaratne, M., Tan, C., Kulkarni, A., Mitra, T., &amp; Peh, L.-S. (2018). Dnestmap: Mapping Deeply-Nested Loops on Ultra-Low Power CGRAs. In Proceedings of the 55th Annual Design Automation Conference on - DAC ’18 (pp. 1–6). New York, New York, USA: ACM Press. (Sites: ACM) Back]]></content>
      <categories>
        <category>Reconfigurable Computing</category>
      </categories>
      <tags>
        <tag>CGRA</tag>
        <tag>Configuration Memory</tag>
        <tag>Nested Loop</tag>
        <tag>Cache</tag>
        <tag>Partitioning</tag>
        <tag>Packing</tag>
        <tag>HyCUBE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Paper] Architecture Exploration of Standard-Cell and FPGA-Overlay CGRAs Using the Open-Source CGRA-ME Framework]]></title>
    <url>%2F2019%2F07%2F17%2F2019-07-17-Paper-Physical-Implementation-of-CGRA-ME%2F</url>
    <content type="text"><![CDATA[简介Jason Anderson组CGRA-ME发布的首篇论文中，介绍其物理实现功能时，在ASIC上实现了Standard Cell CGRA。而该文则是继CGRA-ME发布后，扩充其物理实现功能，在FPGA上实现FPGA Overlay CGRA，并探索CGRA-ME如何在同一平台上比较CGRA的不同物理实现的性能、质量、能耗等指标。 团队多伦多大学ECE部门的Jason H. Anderson组。 相关工作针对CGRA-ME的三大功能：架构建模、应用映射和物理实现，分别有如下三种相关工作： CGADL建模语言，能描述CGRA架构，但没有实现应用的映射以及RTL输出； DRESC、SPR等映射系统，但没有集成到架构建模框架中； 各个硬件架构的物理实现工具也有很多工作，但都没有整合到一个大的统一框架中，以至于很难直接互相比较。 背景OverlayOverlay本身是网络的虚拟化技术，用在FPGA上则是虚拟平台，简而言之其框架如下三个部分： 应用：用HDL、C等实现的应用程序 通过overlay mapping映射到虚拟平台 Overlay：用CGRA等设计的虚拟平台 通过物理映射和配置等映射到底层硬件上 FPGA：包括LUT、RAM等组件 贡献和动机似乎框架类论文的发表，都有系列论文产生的规律，从DRESC到CGRA-ME。这一系列包括首发论文介绍框架，案例论文介绍使用，有时还有众多其中创新组件的单独论文。而该文就是CGRA-ME关于三大功能之一的物理实现的案例论文。 方法该案例中CGRA-ME的架构如下图所示。需要注意的是数据流图是从源码中基于人工标注提取出来的。 上图中CGRA-ME到三个主要功能包括： 从2的CGRA-ADL描述的架构到4输出的MRRG架构模型； 从1的包含人工标注数据流图DFG的应用源码到6的映射工具输出映射结果和配置流； 从2的CGRA-ADL描述的架构到7的RTL硬件描述语言生成，从而到模拟器或者硬件实现。 其中CGRA-ADL理论上能够描述任意CGRA架构； 映射模型则是能扩展到任意CGRA架构的整数线性规划（ILP）映射模型，能理论上产生最优解。虽然理论上映射速度最慢，但该文中针对所有Benchmark映射到$4\times4$尺寸CGRA的时间不超过12分钟。Question:大规模 最后CGRA的物理实现一般有三种方式：定制芯片；一个standard-cell ASIC；在FPGA上作为一层Overlay。其中定制CGRA芯片的成本太高，因此该文实现并比较了后两种方式实现的CGRA。 实验该文主要定义了基于ADRES架构模板的两个$4\times4$的变种架构实例，如下图所示，并对这两个CGRA实例在ASIC和FPGA物理硬件上进行了实现和比较。 Standard-Cell CGRA其中ASIC用的FreePDK45 standard-cell library，一个实验用途的开源45nm standard-cell库。而CGRA-ME生成的Verilog则用Synopsys‘ Design Compiler进行技术映射，具体分为最小面积（area）和最小时延（delay）两种映射；然后分析area breakdown，如下图所示； 接着将映射设计netlist输入standard-cell P&amp;R工具Cadence’s Innovus，得到的P&amp;R平面图如下图所示，输出SPEF文件和整个芯片面积（area），如下表第一列；最后用Synopsys’ PrimeTime工具在设计netlist和SPEF文件基础上，进行静态时间分析（Static Timing Analysis, STA），得到芯片工作频率参数，如下表第二列。 Full Arch Min Area Full Arch Min Delay Reduced Arch Min Area Reduced Arch Min Delay Area [μm2] 317927.0 403753.2 253239.8 327189.2 FMax [MHz] 140 164 142 192 而最后四种设计的硬件排布（layout）的物理视角和变形视角如下图所示。 FPGA-Overlay CGRA而FPGA的实验则用45nm的Altera Stratix IV FPGA芯片，在Altera/Intel的Quartus Prime 16.1上实现。而因为该FPGA上要实现CGRA的乘法器功能，只有通过DSP块。而由于该芯片DSP分布在某些列上，鉴于CGRA的设计需求，在硬件实现时DSP之间的LUT-based块将不会被充分利用。 在Stratix IV上实现两种架构，分析area breakdown得到下图，而统计的总体面积和性能参数如下表所示。其中面积的单位是ALMs（adaptive logic modules），每个ALM包含一个2输出可分割6输入LUT、一个进位链电路（carry-chain circuitry）和2个触发器（flip-flop）。另外包含乘法器（multiplier）的逻辑块使用Stratix IV中的DSP块，该面积并未列在表中统计。 Full Arch Reduced Arch Area [ALM] 8803 7192 FMax [MHz] 89 103 最后得到的FPGA实现硬件平面设计图如下图所示。 总结CGRA-ME集合了三大功能于一身，包括架构建模、应用映射和物理实现，提供了一个统一的CGRA设计平台。Question:定制芯片 Question:大规模. 但未知大规模情况下如何，就如FPGA的VPR和Titan Benchmark运行时间上的差别，但相应但CGRA也需要有大规模的架构设计。 &#8617; Question:定制芯片. 该文物理实现案例中并未提供第一种实现方式，也就是在定制芯片上实现，不知此方法能否用GEM5实现？CCF是否使用的这种实现方式？ &#8617; Reference [1] Chin, S. A., Niu, K. P., Walker, M., Yin, S., Mertens, A., Lee, J., &amp; Anderson, J. H. (2018). Architecture Exploration of Standard-Cell and FPGA-Overlay CGRAs Using the Open-Source CGRA-ME Framework. In Proceedings of the 2018 International Symposium on Physical Design - ISPD ’18 (pp. 48–55). New York, New York, USA: ACM Press. (Sites: ACM) Back]]></content>
      <categories>
        <category>Reconfigurable Computing</category>
      </categories>
      <tags>
        <tag>CGRA</tag>
        <tag>CGRA-ME</tag>
        <tag>FPGA Overlay</tag>
        <tag>Standard Cell</tag>
        <tag>Physical Implementation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Paper] RAMP: Resource-Aware Mapping for CGRAs]]></title>
    <url>%2F2019%2F07%2F16%2F2019-07-16-Paper-RAMP%2F</url>
    <content type="text"><![CDATA[简介针对当前映射操作依赖到布线资源的策略，都是在调度后阶段，即P&amp;R（Placement and Routing）阶段内调整布线方法，而没有重新调度全图，导致不能映射成功或者质量低下。该文则提出在调度前针对三类未能映射的失败情况，在多个备选布线策略中进行选择，再依据新策略重新调度DDG，最后P&amp;R。成功在映射质量、可映射数量以及求解速度方面得到全面提升。 团队相关工作现今各种的映射方法中，不同类型布线策略的最佳模型，均为备选策略。其中作为比较的，主要是寄存器感知和内存感知两种策略的模型。 贡献和动机提出一种新的映射步骤，在原两步映射的前面，加入一个新的布线策略选择步骤。 该方式既能针对不同的映射失败情况，选择最能利用资源的布线策略，提高映射质量； 又能实现布线策略修改后的重新调度，从而提高映射成功率； 另外模拟通用编译器，新提出一个利用其他PE上分布式寄存器组来布线的策略，当该策略失败再选择利用内存来布线的策略，进一步提高质量。 总而言之，有点像一个集大成的工作，融合了现存各类映射方法。具体是以明确的选择方式，针对不同的情况，选择较优的策略为每个不能映射的依赖做重新映射，从而有针对性的避免各个方法的缺点，实现只取各类方法的优势，避免短板。 方法针对每个不能映射的依赖，分析失败类型，分为以下三种： 依赖的前置操作和后置操作被调度在长距离时间（distant timing）；而单个寄存器组不能映射过长的依赖； 依赖的前置操作是一个正在操作的（live-in）或者只读（read-only）值； 依赖的前置操作和后置操作被调度在结果时间（consequent timing）；因为连线资源不够或者空余PE不足，因此不能映射该依赖； 针对上述三种类型，分别选择下图中某个或者某些布线策略进行重新调度和P&amp;R尝试，再在选择的策略的映射结果中选择最好的。 其中各个策略的简单示例如下图所示。 实验总结Reference [1] Dave, S., Balasubramanian, M., &amp; Shrivastava, A. (2018). RAMP: Resource-Aware Mapping for CGRAs. In Proceedings of the 55th Annual Design Automation Conference on - DAC ’18 (pp. 1–6). New York, New York, USA: ACM Press. (Sites: ACM) Back]]></content>
      <categories>
        <category>Reconfigurable Computing</category>
      </categories>
      <tags>
        <tag>CGRA</tag>
        <tag>Mapping</tag>
        <tag>Routing Strategy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Paper] CGRA Express: Accelerating Execution using Dynamic Operation Fusion]]></title>
    <url>%2F2019%2F07%2F13%2F2019-07-13-Paper-CGRA-Express%2F</url>
    <content type="text"><![CDATA[简介CGRA硬件是一组FU由某种风格的稀疏网络连接，并提供分布式寄存器组。FU提供通用整数操作，包括加减乘。相对于FPGA，其特性是提供门级别的可编程性，因此重构时间较短，且时延和能耗也较少。因为CGRA可编程，对应的有效编译系统则很重要。编译的主要挑战是指令调度。其调度的挑战则是稀疏的网络连接和分布式的寄存器组。CGRA上没有专用的布线资源，而是由FU在某个给定时刻被选择实现计算或者布线资源二者之一的功能。CGRA编译器大多集中在映射计算密集型最内层循环到计算阵列上。但对于latency-constrained code并不删除处理，包括非循环、外层循环和形成环的内层循环的代码。 团队密歇根大学（University of Michigan）的Scott Mahlke组，论文当时是Advanced Computer Architecture Laboratory实验室，但现在似乎搜索不到该实验室了。 相关工作CCA是类似的方法，但是不能覆盖所有的不可加速代码的情况。 贡献和动机AAC Benchmark中线性代码相对于循环代码的运行时间，占用了60%以上。因此加速线性代码以及不能软件流水化的循环代码是很重要的。而之前的相关研究并不能覆盖所有的不能直接加速代码的情况。因此本文提出动态操作融合方法，并给出支持该方法的硬件，最后给出实验评估。 方法假设在同一时钟周期中可以同时执行多个存储和计算操作，利用动态操作融合方法将操作通过旁路网络融合在同一个时钟周期内执行，从而缩短整个应用的执行时间。因此该方法核心在于： 分析一个时钟周期内可以执行多少操作： 通过测算实例内所有操作种类的时延，以及时钟周期。所有的操作的时延均不超过时钟周期的一半； 依据结果，建立新的单元叫tick，每个tick时延为0.25ns，用于调度。（切分时钟周期） 设计FU中的旁路网络： 在FU的输出寄存器后加一个二输入的多路器，能够从FU直接输出值和寄存器中选择值作为最终输出，从而降低融合时FU的时延； 代价则是控制流的增加，但仅3%左右。（类似极细的存储优化吗？） 基于上述设计优化调度算法 结果是对于整体测试应用，有7%-17%的执行时间提升，15%的能耗减少。 实验总结Reference [1] $Reference (Sites: $Publisher) Back]]></content>
      <categories>
        <category>Reconfigurable Computing</category>
      </categories>
      <tags>
        <tag>CGRA</tag>
        <tag>Operation Fusion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Paper] (RAMS) Recurrence Cycle Aware Modulo Scheduling for Coarse-Grained Reconfigurable Architectures]]></title>
    <url>%2F2019%2F06%2F28%2F2019-06-28-Paper-RAMS%2F</url>
    <content type="text"><![CDATA[简介该文基于EMS方法，将属于同一个重复环（recurrence cycle）【怎么翻译？】RecMII的操作集中到一个聚合节点（clustered node）上，然后调度这些聚合节点。【这是类似Packing的思路吗？】死锁（Deadlock）会在两个或者更多的recurrence cycle互相依赖时产生【形成环？】。使用启发式方法延长循环时延来解决死锁【具体怎么做的？】。之前的工作需要权衡编译速度和结果质量，而该文的重复环感知方法则无须做这种权衡。 本文工作也是实现在他们自己的CGRA芯片和编译器解决方案中的，而调度结果的质量和速度均比基于模拟退火（simulated annealing, SA）的方法好。 RecMII. 受在当次迭代中仍然需要依赖的上一个迭代中的操作对象（operands）影响，限制II取更小值的限制之一。 &#8617; 相关工作 DRESC编译架构中使用基于模拟退火的模调度 先初始化一个调度，此时仅考虑操作依赖，而不考虑资源冲突 第二步调度器随机在FU之间移动操作，直到发现一个有效的调度 该方法可以取得较好的结果，但是太耗时 EMS集中在操作对象的布线，而不是操作的布局 调度时间大量减少 但调度质量没有DRESC好 该文分析质量下降的主要原因是重复环中操作的投机调度 把操作集中起来再布局到FU中，并不是该文首创 从前人工作中，可以看出其idea一般源于两类方向， 一类是针对调度单个迭代时产生的问题， 有方法层面的，例如增加计算资源利用率，包括：在调度时先集中操作再做布局，最后再布线；还有使用图着色算法等； 也有硬件层面的，例如在调度中降低内存瓶颈、考虑连线时延等，包括建立操作树；将内部连线的时延和数量加入代价函数（cost function）； 还有直接设计架构或者针对特定调度方法微调架构等。 另一类则是直接针对模调度算法 引入模拟退火作为调度算法，但编译太耗时，耗费甚至可能超过几天的时间； 在基于SA方法的中实现资源感知的布局方法，一定程度减少时间，但仍旧不能接受； 使用经典图嵌入方法来映射DFG到硬件三维图表示中； 以边为中心的模调度（edge- centric modulo scheduling, EMS）框架，集中在数据的操作对象（operands）的布线上，而不是数据的操作方式（operations）； 贡献 一个重复环感知的模调度技术，来移除调度中的非必须限制。 一个架构的微小改进，来显著提高调度质量。【软硬件协同设计？】 动机EMS可以在局部对每个操作及其操作对象对布局布线产生快速有效对调度，但不能对全局的操作的调度顺序提供一个解决方案。现存EMS是基于操作在DFG中的高度（height）作为顺序的。而如果是调度一个重复环中的操作，则可能未考虑其生产者，先行局部调度。这就在调度中造成了非必须的约束，因为生产者需要与消费者在同一个II周期内，从而导致II的提升，影响调度质量。 换句话说，一旦一个重复环内的操作被调度，从而固定了调度时刻，则所有周期内的其他操作就被绑定在了该时刻。例如对下图中左边的数据流图映射到右边的架构中的过程进行调度。 按DFG中高度来算优先级的话，会产生如下图的调度过程。没有输入的1，2，4，6是最高优先的，而仅有一个输入边的7也是最优先调度的操作之一。按该顺序开始调度，则会卡在下图的时刻4，因为没有多余的计算资源以供操作9使用。由于7被绑定在时刻3，重复环的时间限制则会要求操作10和11被调度到时刻4和5中。而操作9因为时刻3中没有可用的布线资源，也需要在时刻4中布局，和操作10分配仅剩的一个空余slot。 重复环感知的CGRA映射该方法的核心是一个智能操作排序策略，考虑重复环之间的关系，从而克服上述问题。 该方法先把重复环打包到一个聚合节点中，当作DFG中的单个节点。然后把其中的操作一起调度。对上述示例的打包如下图所示。该步骤其实对输入DFG进行了转换，形成了一个无环图，并重新计算高度，而该转换是解决上述问题的核心。 这样，重复环的所有生产者操作都会被先行调度，不管环中的操作优先级是不是更高。而当某个重复环代表的聚合节点的所有生产者都被调度后，无视优先级立即对聚合节点进行调度。重复环越早调度越好，因为此时资源尚未被太多占用。上述示例的调度结果如下图所示。 硬件架构修改修改RF的连接方式，如下图所示，从而增加值可传递的范围，增加了可调度的可能性，但也增加了长距离通信的时延，不过从结果看是有好处的。 实验结果 Reference [1] Oh, Taewook, Bernhard Egger, Hyunchul Park, and Scott Mahlke. “Recurrence cycle aware modulo scheduling for coarse-grained reconfigurable architectures.” In Proceedings of the 2009 ACM SIGPLAN/SIGBED conference on Languages, compilers, and tools for embedded systems (LCTES ‘09), pp. 21-30. ACM, 2009. (Sites: ACM) Back]]></content>
      <categories>
        <category>Reconfigurable Computing</category>
      </categories>
      <tags>
        <tag>CGRA</tag>
        <tag>Architecture</tag>
        <tag>Modulo Scheduling</tag>
        <tag>EMS</tag>
        <tag>Recurrence Cycle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Paper] Design Methodology for a Tightly Coupled VLIW/Reconfigurable Matrix Architecture: A Case Study]]></title>
    <url>%2F2019%2F06%2F21%2F2019-06-24-Paper-Case-Study-for-ADRES%2F</url>
    <content type="text"><![CDATA[Introduction该文章发表在2004年DATE会议上。主要工作是基于他们之前提出的模调度算法和对应的VLIW与CGRA紧密集成的新架构，提出的一个针对MPEG-2解码器应用的基于C的设计流案例，以此说明他们的设计方法能够完整映射一个应用到可重构系统中，并取得预期的堪比直接软件开发的性能。需要注意整个应用一般包含决定时间的规则化代码段和大量非规则的控制密集型代码，决定时间的往往是循环。考虑到应用代码的两个部分，一般硬件架构设计成由一个可重构阵列和一个处理器组成的架构（可将循环映射到阵列上加速，而控制密集型代码由处理器执行），处理器往往是一个RISC。其实这样的架构/系统设计是类似于软硬件协同设计问题的。 Research TeamTeam Informations该论文的主要研究者与2002年FPT上DRESC (Dynamically Reconfigurable Embedded System Compiler) 和2003年FPL上ADRES (Architecture for Dynamic Reconfigurable Embedded Systems) 的主要研究者是同一拨人。 Previous Related Works一套编译系统：DRESC【这是一套针对CGRA的编译系统？】Questions 一个新的架构：ADRES这是一个超长指令字（Very Long Instruction Word, VLIW）和可重构阵列（reconfigurable matrix）紧密连接的架构模板（template）。区别于松散连接的精简指令集（Reduced Instruction Set Computing, RISC）和可重构阵列架构，ADRES取得了一些优势。【哪些优势？】Questions 新的模调度算法2003年DATE的一篇文章，提出一个新的模调度算法，用于他们提出的ADRES架构。【是否集成在DRESC中？】Questions 硬件架构：ADRES Architecture OverviewADRES架构的整体系统结构如下图所示，类似于一个处理器，其执行核心（core）与【分级存储器？】Questions（memory hierarchy）相连。 系统中的ADRES核心如下图所示，包含诸多组件，例如：【功能单元？】（Function Units, FUs）and 【寄存器组？】（register files, RF）。Questions 该核心有两个功能区域，这两个区域共享一些资源，如上图阴影部分所示，但因为【处理器/协处理器？】Questions（processor/co-processor）模型，这两个区域在执行时永远不会在共享资源上有重叠。这两部分分别为： 超长指令字处理器：利用指令级并行（instruction-level parallelism, ILP）执行无计算内核（kernel）的代码。 这是一个典型的VLIW架构，分配一些FU，并用一个多端口（port）的RF将它们连接起来。而这些FU还能通过可用的端口与memory hierarchy相连。 可重构阵列：用高并行度的方式加速类数据流（dataflow-like）计算内核（kernel）。 除了与VLIW处理器共享的FU和RF部分，可重构阵列部分还有一些包含了FU和RF的可重构单元（reconfigurable cells, RC），其构造如下图所示。 FU可以是异构的，来支持不同的操作集。为了从循环（loop）中分离出控制流，FU支持预测操作（predicted operation）。 多路器（multiplexors）用于和其他资源数据直连。 配置存储器（configuration RAM）则本地（locally）存储一些【配置文本？】（configuration contexts）Questions。 配置环境可以在每个周期（cycle-by-cycle）从配置存储器中被循环读取。 当本地配置存储器不够大时，配置环境也可以从memory hierarchy中读取，但会造成额外的延迟开销。 存储的共享（share）用于支持VLIW处理器与可重构阵列之间的通信，例如RF和memory hierarchy的共享。 ADRES的VLIW和可重构阵列紧密连接架构的优势： 用VLIW能够加速非计算内核代码（non-kernel code），这些代码也往往是很多应用的瓶颈，而RISC不行； 通过RF和内存存储的共享极大的降低了通信开销和编程复杂度； 共享的资源能够极大降低【资源？】Questions开销（costs） 基于C的设计流ADRES的设计流如下图所示： 一个设计开始于使用C语言描述的应用，作为输入之一引入设计流。上图的右侧则是涉及目标硬件架构的基于XML的描述，作为另一个输入引入设计流。具体描述如下： profiling/partitioning：发现候选循环（loop），将在执行期映射到可重构阵列（P.S. 主要依靠人工识别） Source-level transformations：重构计算内核（kernel），以允许流水化 IMPACT：是一个主要针对VLIW的编译器框架，用来语法解析、分析和优化C代码 Lcode：IMPACT生成的一个中间表示，作为调度（scheduling）的输入 Architecture：XML描述的语法分析和抽象，转化架构描述为内部图表示 接受应用程序和硬件表示作为输入，该工具分两个部分进行处理 模调度（modulo scheduling）算法使得计算内核能够达到高并行度 同时传统指令级并行调度使得非内核代码达到中度并行 这两部分的通信由工具发现并提供【是由register allocation部分负责吗？】Questions 为VLIW和可重构阵列生成调度后代码，可由联合仿真器（co-simulator）进行仿真 另外一个正在进行的工作是内核调度，当配置存储器（configuration RAM）不能储存所有的内核时，该算法能够降低配置开销 一个中央配置文件（setting file）控制整个编译过程Question1，包括整个设计环境和每个单独的循环。因此允许编译器在某一时刻集中关注单个循环，这种策略能降低设计时间，如下图所示。 第一步，针对单个循环loop1，先进行源代码级转换输出loop1*，并由VLIW进行验证。这一步的用时极少； 第二步，则是对loop1*进行模调度，该文中的模调度算法类似一个布局布线算法，但仍然很耗时； 模调度尝试找到一个调度，拥有尽量小的【启动间距？】（initiation interval, II）Questions，即便II只有1的差距，也会造成很大影响； 为了找到一个更小的II，值得耗时进行多次尝试，而如果模调度始终找不到好的解决方案，就返回源码级转换进行更多改进，直到找到一个合适的调度； 接着，暂存loop1*的映射到VLIW； 返回第一步迭代处理loop2，直到所有的循环均成果映射到可重构阵列上进行加速； 最后多个循环能被中央setting file整合起来，而不会发生特殊情况造成结果不确定。 这种设计策略的有点包括，能够使焦点专注于单个循环的映射，且每个循环能够被co-simulator验证，且对并行化设计流很有帮助。而两个硬件部分VLIW和可重构阵列之间的通信，也因为紧密的硬件架构，变得能够依靠编译器自动化进行，且开销很小。仅需识别两部分需要产生和消耗的实时变量，并将其存入共享RF（VLIW RF）中即可，而通过内存空间的通信则更无须特别做什么，这两部分共享内存访问。 MPEG-2解码器映射案例MPEG-2解码器是一个多媒体领域的应用，需要很高的计算能耗。其大多执行时间消耗在若干计算内核（kernel）上，因此很适合用可重构架构来运行。该案例使用一个C实现的实例，源自MPEG Software Simulation Group (MSSG)。该实现的代码对处理器高度优化过，且是MediaBench的一部分。整个应用包含21个文件，共一万行左右代码。 映射到ADRES架构 profiling：人工识别到应用中有14处循环（loop），作为可重构阵列的流水候选。另外，为了进一步提升性能，该文作者还从VLD(variable length decoding)循环中抽取出2个去量化循环，用于在可重构阵列中加速，如下图所示。所有16处循环占总执行时间的84.6%，却仅占总代码量的3.3%。 source-level transformation：除了少部分能直接映射的循环，其余需要先进行循环转换。 例如下图中IDCT（inverse dis- crete cosine transformation）计算内核，其内层循环体，是一个函数，因此对于可重构阵列是不可流水化的。 首先把循环体函数（图中的idctrow）的操作放入循环内 接着把非规则计算（图中的shortcut）移除，使得循环更规则化 最后把idct应用到一个微块上，使其符合硬件8x8的尺寸。对于MPEG-2视频一般使用6个8x8到块，也使得原来的8次迭代增加到64次迭代，极大降低了流水开支question2。 对于其他的不易流水化的循环，还有更多的转换方法， 例如循环展开（loop unrolling）、【循环扁平化？】（loop flattening）、【变量复制？】（variable replicating）等Questions 但这些到目前（2004年）都需要根据设计者的经验来选择合适的。 该文作者使用3天来完成应用程序中这些循环的C到C改写，实现循环转换。 当所有循环都被工具成功映射后，可以为每个循环获取其配置context。 而当MPEG-2应用到输入视频，改变大小时，循环数量会相应增加，导致配置存储器可能不够，因此该文正在解决的技术是内核调度技术。 映射实验结果为了做实验，使用来一个类似MorphoSys的硬件实例作为ADRES模板的实现。 总共64个FU，被分为四片（tile），每片包含4x4的FU； 每个FU除了能连接相邻4个FU，还可以连接所有同一tile中的同行和同列FU，另外整个阵列还有行总线和列总线； 第一行FU能够被VLIW处理器使用，并连接到一个多端口寄存器组上； 只有第一行的FU能够执行内存操作，例如load/store操作。 实验结果如下图所示，第四列是Instruction-per-cycle（IPC）；第五列是total pipeline stages。第六列调度时间是在Pentium 4 1.7GHz/Linux PC平台上运行的CPU时间。 【上述图示均为文中图片，有待重画】Questions Questions. 用【】框起来的内容为尚未确定或者待解决的问题 &#8617; Question1. 【是不是存储在中央寄存器组中？因为该硬件与这个文件的属性很相符】 &#8617; question2. 流水开支是指？怎么降低流水开支的？ &#8617; Reference [1] Mei, Bingfeng, Serge Vernalde, Diederik Verkest, and Rudy Lauwereins. “Design methodology for a tightly coupled VLIW/reconfigurable matrix architecture: A case study.” In Proceedings of the conference on Design, automation and test in Europe-Volume 2, p. 21224. IEEE Computer Society, 2004. (Sites: IEEE) Back[2] Mei, Bingfeng, Serge Vernalde, Diederik Verkest, Hugo De Man, and Rudy Lauwereins. “DRESC: A retargetable compiler for coarse-grained reconfigurable architectures.” In 2002 IEEE International Conference on Field-Programmable Technology, 2002.(FPT). Proceedings., pp. 166-173. IEEE, 2002. (Sites: IEEE) Back[3] Mei, Bingfeng, Serge Vernalde, Diederik Verkest, Hugo De Man, and Rudy Lauwereins. “ADRES: An architecture with tightly coupled VLIW processor and coarse-grained reconfigurable matrix.” In International Conference on Field Programmable Logic and Applications, pp. 61-70. Springer, Berlin, Heidelberg, 2003. (Sites: Springer) Back[4] Mei, Bingfeng, Serge Vernalde, Diederik Verkest, Hugo De Man, and Rudy Lauwereins. “Exploiting Loop-Level Parallelism on Coarse-Grained Reconfigurable Architectures Using Modulo Scheduling.” In Proceedings of the conference on Design, Automation and Test in Europe-Volume 1, p. 10296. IEEE Computer Society, 2003. (Sites: IEEE) Back]]></content>
      <categories>
        <category>Reconfigurable Computing</category>
      </categories>
      <tags>
        <tag>ADRES</tag>
        <tag>CGRA</tag>
        <tag>Case Study</tag>
        <tag>Modulo Scheduling</tag>
        <tag>VLIW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Survey] CGRA]]></title>
    <url>%2F2019%2F06%2F14%2F2019-06-17-Survey-CGRA%2F</url>
    <content type="text"><![CDATA[摘要计算密集型应用的硬件加速往往通过映射技术将密集计算映射（Mapping）到可重构计算（Reconfigurable Computing, RC）芯片上。而一般而言，应用执行时间主要消耗在少量的循环处。因此，可重构计算芯片上的循环映射优化对于提升计算密集型应用的执行性能具有重要意义。CGRA（Coarse-Grained Reconfigurable Architecture）是一种可重构计算架构，字面翻译为粗粒度可重构处理器。其基础处理单元（Processing Element, PE）为指令级别（Word-Level）的，区别于FPGA（Field Programable Gate Array, 现场可编程门阵列）的门级别，能够直接实现一些典型的逻辑计算。由于CGRA上特殊的硬件结构以及循环程序中语句复杂的依赖关系，CGRA上的循环映射也存在着挑战。 可重构处理器体系结构硬件简介及基本属性组成：PE组成的Array由一个类mesh风格的内部连线连接起来的架构 属性：由于大量的资源因此有高吞吐量而分布式的硬件带来低功耗动态可编程则提供高灵活性 主要参数：大小：PE 数量，一般构成一个正方形的阵列，一般44～88，也有32*32互连形式：crossbar；mesh；mesh plus；morphosys……寄存器共享方式：完全分布式；bus行列分布式；中央寄存器式；混合式PE 功能：同构/异构；ALU功能类型；PE动态功能…… 硬件分类根据程序运行的过程中阵列的电路结构是否改变，分为： 静态可重构：如FPGA 动态可重构：如CGRA 根据阵列互连形式的不同，CGRA主要分为： 一维互连CGRA 二维互连CGRA 可重构处理器编译技术编译对可重构计算的重要性由于可重构处理器和通用处理器的硬件结构有很大的不同，可重构处理器编译器的编译流程和生成的可执行文件都有很大的不同。 通用处理器的编译是将应用程序编译生成单一目标处理器的汇编指令和机器码。 而可重构处理器编译器则首先要对应用程序进行软硬件划分，把应用程序中适合硬件加速的计算密集型部分划分出来。然后针对两部分分别作编译处理，分别生产运行在主控制器控制码和可重构计算阵列上配置信息。 因此，我们所熟知的串行编程模式不能够被直接应用在可重构处理器上。可重构处理器编译是一个极具挑战性的工作。如果没 有易用的编译器，编程人员则需要非常熟悉可重构处理器的底层硬件结构来进行 开发。这将大大降低可重构处理器的通用性。因此，可重构处理器编译器对于可 重构处理器具有极为重要的作用。 CGRA循环映射技术为何要针对循环进行映射优化？ 因为在现代实际生活应用程序中(例如:声音、图像处理等应用)，循环往往占据了这些程序的大部分运行时间。循环的特点是多次重复同一个计算内核（Kernel），不改变运算的结构，只改变运算的数据。[2] 因此循环映射技术往往是针对从某类应用程序中抽象出的计算内核来进行优化的。 CGRA映射（Mapping）技术根据PE在映射时的功能，可分为两类映射技术： 空间映射：主要针对一维互连架构 时域映射：主要针对二维互连架构 根据可重构计算阵列的运算模式，可分为下列两种情况： 一次配置多次执行：由于少量的配置，可以大大节省配置的开销，从而可以提高性能，降低功耗。 一次配置一次执行：提高来可配置性，但大大降低可重构处理器的执行性能，功耗也会大大增加。 总之，降低配置次数对于提高可重构处 理器的性能是非常有帮助的。 挑战 多层嵌套循环如何处理，以降低内外循环之间交互的开销，同时保证各个循环之间执行顺序的正确性。 由于循环间的数据依赖，如何在限定的空间资源和时序约束中进行合法的布局布线也是一个难点。 选取合适的循环变换可以改变数据依赖的形式，以更好得进行映射，因此如何选择循环变换方法就是一个挑战； 硬件资源有限，如何充分地利用有限的各类硬件资源对于循环映射也是一个挑战： 有限的配置存储资源：如果配置存储资源不够，动态可重构的能力会非常受限。因此，如何在循环映射的时候减少配置代价是一个难点； 稀疏的计算和互连资源：由于芯片面积和功耗的限制，计算阵列的规模一般不大，且阵列中计算单元之间的互连资源一般也比较稀疏； 有限的数据存储资源：主要体现在带宽和存储空间上，由于芯片面积和功耗的限制，阵列中只有某些处理单元能够访问数据存储器； 调度算法布局布线]]></content>
      <categories>
        <category>Reconfigurable Computing</category>
      </categories>
      <tags>
        <tag>CGRA</tag>
        <tag>Architecture</tag>
        <tag>Survey</tag>
        <tag>Mapping</tag>
        <tag>Scheduling</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Compiler Overview]]></title>
    <url>%2F2019%2F03%2F06%2F2019-03-06-Compiler-Overview%2F</url>
    <content type="text"><![CDATA[Program Execution 程序执行计算机程序执行过程主要涉及四个部分，包括代码、翻译、中间表示和执行。其中侠义的编译器属于翻译部分，而一个完整的编译系统的执行包含了所有四个部分。 Code 代码代码（Code）是指由计算机程序的形式编码而成的一系列指令集合，它能够由计算机执行。在计算机硬件上运行软件需要两个部分，一个是代码（Code），另一个是数据（Data）。 计算机只能直接执行由指令集中指令构成的机器码（Machine Code）。但不论是机器码还是其他低级程序语言，都不是可以简单阅读的，因此大多源码（Source Code）都是由高级程序语言编写的。而编译器（Compiler）或者解释器（Interpreter）则将源码翻译成计算机可执行的机器语言。一个编译器生成的是目标代码（Object Code），一般来说就是机器语言（Machine Language）构成的，但也包括一些比源码更低级别的中间语言（Intermediate Language）。而解释器则是解释字节码（Bytecode）的工具，字节码是一种比源码低级的代码。 接下来具体说明代码的不同种类。 Source Code任意的使用人类可读的程序语言编写的代码组合都可称为源码（Source Code），它可能包含注释，一般使用富文本表达。源码一般会被汇编器（Assembler）或者编译器（Compiler）翻译成二进制机器码（Binary Machine Code），从而能够直接被计算机理解，这段机器码可能会被存储起来，从而晚一点再执行。除此之外，源码也可能被解释，从而立即执行。 Object Code目标代码（Object Code）是编译器的产物。通常来讲，目标码是一段状态或者指令的序列，它是由一种计算机语言表示的，一般是一种机器码语言或者中间语言，例如RTL (Register Transfer Language)就是一种中间语言。 BytecodeMachine CodeMicrocodeTranslator (Computing)CompilerCompile-timeOptimizing CompilerIntermediate Representation (IR)ExecutionRuntime SystemRuntimeExecutableInterpreterVirtual Machine Compilation StrategiesJust-in-Time (JIT)Tracing Just-in-TimeAhead-of-Time (AOT)TranscompilationRecompilation]]></content>
      <categories>
        <category>Compiler</category>
      </categories>
      <tags>
        <tag>Compiler</tag>
        <tag>Overview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CGO Compiler]]></title>
    <url>%2F2019%2F02%2F27%2F2019-02-27-CGO-Compiler%2F</url>
    <content type="text"><![CDATA[International Symposium on Code Generation and Optimization (CGO) 是和International Symposium on High-Performance Computer Architecture (HPCA)，ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP)，International Conference on Compiler Construction (CC)合作的。 This is a record of reading about working shop on CGO 19’. The workshop included talks from various projects - Julia (Julia Computing), TVM (UW), Glow (Facebook), XLA (Google), nGraph (Intel), TensorRT (Nvidia), xDNN (Xilinx, DeePhi DP(https://www.xilinx.com/products/design-tools/developer-forum.html)U) and the soon to release MLIR (Google). Workshop on Compilers for Machine Learning (C4ML)Julia: A Compiler to compile Code from Julia to XLA “Getting to Machine Learning from a General Purpose Compiler”, Keno Fischer, Jameson Nash, Julia Computing.Presentation: PDF, Blog 这个编译器的目标是编译Julia代码到TPU平台的XLA代码上，因此编译器的Backend是LLVM。而LLVM是一个静态编译Backend，而Julia语言在语义上是动态语言，因此编译器需要转化原语言中的动态语义到LLVM的静态语义表示。]]></content>
      <categories>
        <category>Conference</category>
      </categories>
      <tags>
        <tag>Compiler</tag>
        <tag>Record</tag>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Domain Specific Words]]></title>
    <url>%2F2019%2F02%2F25%2F2019-02-25-Domain-Specific-Words%2F</url>
    <content type="text"><![CDATA[This is a record of normal words in computer science domain. Domain Specific WordsVanilla CodeVanilla often refers to pure or plain. So in terms of programming languages, it means either without the use of 3rd party libraries or without the use of frameworks. 在计算机编程的范畴中，通常表示不使用第三方库或任何相关的框架平台等。]]></content>
      <categories>
        <category>General Concept</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>Record</tag>
      </tags>
  </entry>
</search>
