<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Compiler Overview]]></title>
    <url>%2F2019%2F03%2F06%2F2019-03-06-Compiler-Overview%2F</url>
    <content type="text"><![CDATA[Program Execution 程序执行计算机程序执行过程主要涉及四个部分，包括代码、翻译、中间表示和执行。其中侠义的编译器属于翻译部分，而一个完整的编译系统的执行包含了所有四个部分。 Code 代码代码（Code）是指由计算机程序的形式编码而成的一系列指令集合，它能够由计算机执行。在计算机硬件上运行软件需要两个部分，一个是代码（Code），另一个是数据（Data）。 计算机只能直接执行由指令集中指令构成的机器码（Machine Code）。但不论是机器码还是其他低级程序语言，都不是可以简单阅读的，因此大多源码（Source Code）都是由高级程序语言编写的。而编译器（Compiler）或者解释器（Interpreter）则将源码翻译成计算机可执行的机器语言。一个编译器生成的是目标代码（Object Code），一般来说就是机器语言（Machine Language）构成的，但也包括一些比源码更低级别的中间语言（Intermediate Language）。而解释器则是解释字节码（Bytecode）的工具，字节码是一种比源码低级的代码。 接下来具体说明代码的不同种类。 Source Code任意的使用人类可读的程序语言编写的代码组合都可称为源码（Source Code），它可能包含注释，一般使用富文本表达。源码一般会被汇编器（Assembler）或者编译器（Compiler）翻译成二进制机器码（Binary Machine Code），从而能够直接被计算机理解，这段机器码可能会被存储起来，从而晚一点再执行。除此之外，源码也可能被解释，从而立即执行。 Object Code目标代码（Object Code）是编译器的产物。通常来讲，目标码是一段状态或者指令的序列，它是由一种计算机语言表示的，一般是一种机器码语言或者中间语言，例如RTL (Register Transfer Language)就是一种中间语言。 BytecodeMachine CodeMicrocodeTranslator (Computing)CompilerCompile-timeOptimizing CompilerIntermediate Representation (IR)ExecutionRuntime SystemRuntimeExecutableInterpreterVirtual Machine Compilation StrategiesJust-in-Time (JIT)Tracing Just-in-TimeAhead-of-Time (AOT)TranscompilationRecompilation]]></content>
      <categories>
        <category>Compiler</category>
      </categories>
      <tags>
        <tag>Compiler</tag>
        <tag>Overview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CGO Compiler]]></title>
    <url>%2F2019%2F02%2F27%2F2019-02-27-CGO-Compiler%2F</url>
    <content type="text"><![CDATA[International Symposium on Code Generation and Optimization (CGO) 是和International Symposium on High-Performance Computer Architecture (HPCA)，ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP)，International Conference on Compiler Construction (CC)合作的。 This is a record of reading about working shop on CGO 19’. The workshop included talks from various projects - Julia (Julia Computing), TVM (UW), Glow (Facebook), XLA (Google), nGraph (Intel), TensorRT (Nvidia), xDNN (Xilinx, DeePhi DP(https://www.xilinx.com/products/design-tools/developer-forum.html)U) and the soon to release MLIR (Google). Workshop on Compilers for Machine Learning (C4ML)Julia: A Compiler to compile Code from Julia to XLA “Getting to Machine Learning from a General Purpose Compiler”, Keno Fischer, Jameson Nash, Julia Computing.Presentation: PDF, Blog 这个编译器的目标是编译Julia代码到TPU平台的XLA代码上，因此编译器的Backend是LLVM。而LLVM是一个静态编译Backend，而Julia语言在语义上是动态语言，因此编译器需要转化原语言中的动态语义到LLVM的静态语义表示。]]></content>
      <categories>
        <category>Conference</category>
      </categories>
      <tags>
        <tag>Record</tag>
        <tag>Compiler</tag>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Domain Specific Words]]></title>
    <url>%2F2019%2F02%2F25%2F2019-02-25-Domain-Specific-Words%2F</url>
    <content type="text"><![CDATA[This is a record of normal words in computer science domain. Domain Specific WordsVanilla CodeVanilla often refers to pure or plain. So in terms of programming languages, it means either without the use of 3rd party libraries or without the use of frameworks. 在计算机编程的范畴中，通常表示不使用第三方库或任何相关的框架平台等。]]></content>
      <categories>
        <category>General Concept</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>Record</tag>
      </tags>
  </entry>
</search>
